{"ast":null,"code":"import _toConsumableArray from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Gallery.js\";\nimport React, { Component } from 'react';\nimport './Gallery.css';\nimport Items from './Items.js';\nimport Target from './Target.js';\nimport Selectionbox from './Selectionbox.js';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport CustomDragLayer from './costumDragLayer';\nimport { DragDropContext } from 'react-dnd';\nimport { collisionDetection } from './helper.js';\n\nvar Gallery =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Gallery, _Component);\n\n  function Gallery() {\n    var _this;\n\n    _classCallCheck(this, Gallery);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Gallery).call(this));\n\n    _this.onmousedown = function (e) {\n      // Only activate selection box when not dragging on a selectable item\n      if (e.target.getAttribute(\"type\") !== \"selectableElement\") {\n        _this.setState({\n          selectionboxVisibility: \"visible\"\n        });\n\n        var currentSelectionboxCoordinates = _objectSpread({}, _this.state.selectionboxCoordinates);\n\n        currentSelectionboxCoordinates.x1 = e.clientX; //Set the initial X\n\n        currentSelectionboxCoordinates.y1 = e.clientY; //Set the initial Y\n\n        _this.setState({\n          selectionboxCoordinates: currentSelectionboxCoordinates\n        });\n      }\n    };\n\n    _this.onmousemove = function (e) {\n      // Always update coordinates based on mouse position\n      var currentSelectionboxCoordinates = _objectSpread({}, _this.state.selectionboxCoordinates);\n\n      currentSelectionboxCoordinates.x2 = e.clientX;\n      currentSelectionboxCoordinates.y2 = e.clientY;\n\n      _this.setState({\n        selectionboxCoordinates: currentSelectionboxCoordinates\n      }); // Only check for collisions if selection box is active\n\n\n      if (_this.state.selectionboxVisibility === \"visible\") {\n        var collisions = collisionDetection(currentSelectionboxCoordinates);\n\n        _this.setState({\n          selected: collisions,\n          collisions: collisions\n        });\n      }\n    };\n\n    _this.onmouseup = function (e) {\n      // Check if no collisions occured and mouseup event is outside of a selectable item\n      if (e.target.getAttribute(\"type\") !== \"selectableElement\" && _this.state.collisions.length === 0) {\n        // if so unselect all items\n        _this.setState({\n          selected: []\n        });\n      } // Hide selection box und reset collisions\n\n\n      _this.setState({\n        selectionboxVisibility: \"hidden\",\n        collisions: []\n      });\n    };\n\n    _this.selectItem = function (listId) {\n      // Check if shiftkey is pressed\n      if (_this.state.shiftKey) {\n        var selected = _toConsumableArray(_this.state.selected);\n\n        selected.push(listId);\n      } // Check if clicked on an already selected item\n      else if (_this.state.selected.includes(listId)) {\n          return;\n        } // else select item\n\n\n      _this.setState({\n        selected: [listId]\n      });\n    };\n\n    _this.setCrrentlyDraggedItem = function (value) {\n      // if item is dragged value = listId otherwise value = null\n      _this.setState({\n        currentlyDraggedItem: value\n      });\n    };\n\n    _this.keyEvent = function (e) {\n      _this.setState({\n        shiftKey: e.shiftKeyPressed\n      });\n    };\n\n    _this.state = {\n      selected: [],\n      collisions: [],\n      selectionboxCoordinates: {\n        x1: 0,\n        x2: 0,\n        y1: 0,\n        y2: 0\n      },\n      selectionboxVisibility: \"hidden\",\n      currentlyDraggedItem: null,\n      shiftKeyPressed: false\n    };\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        onMouseDown: this.onmousedown,\n        onMouseMove: this.onmousemove,\n        onMouseUp: this.onmouseup,\n        onKeyDown: this.keyEvent,\n        onKeyUp: this.keyEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(CustomDragLayer, {\n        draggedItem: this.state.currentlyDraggedItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Selectionbox, {\n        selectionboxCoordinates: this.state.selectionboxCoordinates,\n        visibility: this.state.selectionboxVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Target, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Items, {\n        selectItem: this.selectItem,\n        selectedItems: this.state.selected,\n        ondrag: this.setCrrentlyDraggedItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Gallery;\n}(Component);\n\nexport default DragDropContext(HTML5Backend)(Gallery);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Gallery.js"],"names":["React","Component","Items","Target","Selectionbox","HTML5Backend","CustomDragLayer","DragDropContext","collisionDetection","Gallery","onmousedown","e","target","getAttribute","setState","selectionboxVisibility","currentSelectionboxCoordinates","state","selectionboxCoordinates","x1","clientX","y1","clientY","onmousemove","x2","y2","collisions","selected","onmouseup","length","selectItem","listId","shiftKey","push","includes","setCrrentlyDraggedItem","value","currentlyDraggedItem","keyEvent","shiftKeyPressed"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,kBAAT,QAAmC,aAAnC;;IAGMC,O;;;;;AACF,qBAAa;AAAA;;AAAA;;AACX;;AADW,UAiBbC,WAjBa,GAiBC,UAACC,CAAD,EAAO;AACjB;AACA,UAAGA,CAAC,CAACC,MAAF,CAASC,YAAT,CAAsB,MAAtB,MAAkC,mBAArC,EAAyD;AACrD,cAAKC,QAAL,CAAc;AAACC,UAAAA,sBAAsB,EAAE;AAAzB,SAAd;;AACA,YAAIC,8BAA8B,qBAAO,MAAKC,KAAL,CAAWC,uBAAlB,CAAlC;;AACAF,QAAAA,8BAA8B,CAACG,EAA/B,GAAoCR,CAAC,CAACS,OAAtC,CAHqD,CAGN;;AAC/CJ,QAAAA,8BAA8B,CAACK,EAA/B,GAAoCV,CAAC,CAACW,OAAtC,CAJqD,CAIN;;AAC/C,cAAKR,QAAL,CAAc;AAACI,UAAAA,uBAAuB,EAAEF;AAA1B,SAAd;AACH;AACJ,KA1BY;;AAAA,UA4BbO,WA5Ba,GA4BC,UAACZ,CAAD,EAAO;AACjB;AACA,UAAIK,8BAA8B,qBAAO,MAAKC,KAAL,CAAWC,uBAAlB,CAAlC;;AACAF,MAAAA,8BAA8B,CAACQ,EAA/B,GAAoCb,CAAC,CAACS,OAAtC;AACAJ,MAAAA,8BAA8B,CAACS,EAA/B,GAAoCd,CAAC,CAACW,OAAtC;;AACA,YAAKR,QAAL,CAAc;AAACI,QAAAA,uBAAuB,EAAEF;AAA1B,OAAd,EALiB,CAMjB;;;AACA,UAAG,MAAKC,KAAL,CAAWF,sBAAX,KAAsC,SAAzC,EAAmD;AAC/C,YAAMW,UAAU,GAAGlB,kBAAkB,CAACQ,8BAAD,CAArC;;AACA,cAAKF,QAAL,CAAc;AAACa,UAAAA,QAAQ,EAAED,UAAX;AAAuBA,UAAAA,UAAU,EAAEA;AAAnC,SAAd;AACH;AACJ,KAvCY;;AAAA,UAyCbE,SAzCa,GAyCD,UAACjB,CAAD,EAAO;AACf;AACA,UAAGA,CAAC,CAACC,MAAF,CAASC,YAAT,CAAsB,MAAtB,MAAkC,mBAAlC,IAAyD,MAAKI,KAAL,CAAWS,UAAX,CAAsBG,MAAtB,KAAiC,CAA7F,EAA+F;AAC3F;AACA,cAAKf,QAAL,CAAc;AAACa,UAAAA,QAAQ,EAAE;AAAX,SAAd;AACH,OALc,CAMf;;;AACA,YAAKb,QAAL,CAAc;AAACC,QAAAA,sBAAsB,EAAE,QAAzB;AAAmCW,QAAAA,UAAU,EAAE;AAA/C,OAAd;AACH,KAjDY;;AAAA,UAmDbI,UAnDa,GAmDA,UAACC,MAAD,EAAY;AACrB;AACA,UAAG,MAAKd,KAAL,CAAWe,QAAd,EAAuB;AACnB,YAAIL,QAAQ,sBAAO,MAAKV,KAAL,CAAWU,QAAlB,CAAZ;;AACAA,QAAAA,QAAQ,CAACM,IAAT,CAAcF,MAAd;AACH,OAHD,CAMA;AANA,WAOK,IAAG,MAAKd,KAAL,CAAWU,QAAX,CAAoBO,QAApB,CAA6BH,MAA7B,CAAH,EAAwC;AACzC;AACH,SAXoB,CAYrB;;;AACA,YAAKjB,QAAL,CAAc;AAACa,QAAAA,QAAQ,EAAE,CAACI,MAAD;AAAX,OAAd;AACH,KAjEY;;AAAA,UAmEbI,sBAnEa,GAmEY,UAACC,KAAD,EAAW;AAChC;AACA,YAAKtB,QAAL,CAAc;AAACuB,QAAAA,oBAAoB,EAAED;AAAvB,OAAd;AACH,KAtEY;;AAAA,UAwEbE,QAxEa,GAwEF,UAAC3B,CAAD,EAAO;AACd,YAAKG,QAAL,CAAc;AAACkB,QAAAA,QAAQ,EAAErB,CAAC,CAAC4B;AAAb,OAAd;AACH,KA1EY;;AAEX,UAAKtB,KAAL,GAAa;AACTU,MAAAA,QAAQ,EAAE,EADD;AAETD,MAAAA,UAAU,EAAE,EAFH;AAGTR,MAAAA,uBAAuB,EAAE;AACrBC,QAAAA,EAAE,EAAE,CADiB;AAErBK,QAAAA,EAAE,EAAE,CAFiB;AAGrBH,QAAAA,EAAE,EAAE,CAHiB;AAIrBI,QAAAA,EAAE,EAAE;AAJiB,OAHhB;AASTV,MAAAA,sBAAsB,EAAE,QATf;AAUTsB,MAAAA,oBAAoB,EAAE,IAVb;AAWTE,MAAAA,eAAe,EAAE;AAXR,KAAb;AAFW;AAeZ;;;;6BA6DQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,WAAW,EAAE,KAAK7B,WAA7C;AAA0D,QAAA,WAAW,EAAE,KAAKa,WAA5E;AAAyF,QAAA,SAAS,EAAE,KAAKK,SAAzG;AAAoH,QAAA,SAAS,EAAE,KAAKU,QAApI;AAA8I,QAAA,OAAO,EAAE,KAAKA,QAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,eAAD;AAAiB,QAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWoB,oBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,YAAD;AAAc,QAAA,uBAAuB,EAAE,KAAKpB,KAAL,CAAWC,uBAAlD;AAA2E,QAAA,UAAU,EAAE,KAAKD,KAAL,CAAWF,sBAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,KAAD;AACI,QAAA,UAAU,EAAE,KAAKe,UADrB;AAEI,QAAA,aAAa,EAAE,KAAKb,KAAL,CAAWU,QAF9B;AAGI,QAAA,MAAM,EAAE,KAAKQ,sBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAYH;;;;EA1FiBlC,S;;AA6FtB,eAAeM,eAAe,CAACF,YAAD,CAAf,CAA8BI,OAA9B,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport './Gallery.css';\nimport Items from './Items.js'\nimport Target from './Target.js'\nimport Selectionbox from './Selectionbox.js'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport CustomDragLayer from './costumDragLayer'\nimport { DragDropContext } from 'react-dnd'\nimport { collisionDetection } from './helper.js'\n\n\nclass Gallery extends Component {\n    constructor(){\n      super()\n      this.state = {\n          selected: [],\n          collisions: [],\n          selectionboxCoordinates: {\n              x1: 0,\n              x2: 0,\n              y1: 0,\n              y2: 0,\n          },\n          selectionboxVisibility: \"hidden\",\n          currentlyDraggedItem: null,\n          shiftKeyPressed: false\n      }\n    }\n\n    onmousedown = (e) => {\n        // Only activate selection box when not dragging on a selectable item\n        if(e.target.getAttribute(\"type\") !== \"selectableElement\"){\n            this.setState({selectionboxVisibility: \"visible\"})\n            let currentSelectionboxCoordinates = {...this.state.selectionboxCoordinates}\n            currentSelectionboxCoordinates.x1 = e.clientX; //Set the initial X\n            currentSelectionboxCoordinates.y1 = e.clientY; //Set the initial Y\n            this.setState({selectionboxCoordinates: currentSelectionboxCoordinates})\n        }\n    };\n\n    onmousemove = (e) => {\n        // Always update coordinates based on mouse position\n        let currentSelectionboxCoordinates = {...this.state.selectionboxCoordinates}\n        currentSelectionboxCoordinates.x2 = e.clientX; \n        currentSelectionboxCoordinates.y2 = e.clientY; \n        this.setState({selectionboxCoordinates: currentSelectionboxCoordinates})\n        // Only check for collisions if selection box is active\n        if(this.state.selectionboxVisibility === \"visible\"){\n            const collisions = collisionDetection(currentSelectionboxCoordinates)\n            this.setState({selected: collisions, collisions: collisions})\n        }\n    };\n\n    onmouseup = (e) => {\n        // Check if no collisions occured and mouseup event is outside of a selectable item\n        if(e.target.getAttribute(\"type\") !== \"selectableElement\" && this.state.collisions.length === 0){\n            // if so unselect all items\n            this.setState({selected: []})\n        }\n        // Hide selection box und reset collisions\n        this.setState({selectionboxVisibility: \"hidden\", collisions: []})\n    }\n\n    selectItem = (listId) => {\n        // Check if shiftkey is pressed\n        if(this.state.shiftKey){\n            let selected = [...this.state.selected]\n            selected.push(listId)\n        }\n\n\n        // Check if clicked on an already selected item\n        else if(this.state.selected.includes(listId)){\n            return\n        }\n        // else select item\n        this.setState({selected: [listId]})\n    }\n\n    setCrrentlyDraggedItem = (value) => {\n        // if item is dragged value = listId otherwise value = null\n        this.setState({currentlyDraggedItem: value})\n    }\n    \n    keyEvent = (e) => {\n        this.setState({shiftKey: e.shiftKeyPressed})\n    }\n\n    render() {\n        return (\n            <div className=\"container\" onMouseDown={this.onmousedown} onMouseMove={this.onmousemove} onMouseUp={this.onmouseup} onKeyDown={this.keyEvent} onKeyUp={this.keyEvent}>\n                <CustomDragLayer draggedItem={this.state.currentlyDraggedItem}/>\n                <Selectionbox selectionboxCoordinates={this.state.selectionboxCoordinates} visibility={this.state.selectionboxVisibility} />\n                <Target/>\n                <Items\n                    selectItem={this.selectItem}\n                    selectedItems={this.state.selected}\n                    ondrag={this.setCrrentlyDraggedItem}\n                 />\n            </div>\n        );\n    }\n}\n\nexport default DragDropContext(HTML5Backend)(Gallery);\n"]},"metadata":{},"sourceType":"module"}