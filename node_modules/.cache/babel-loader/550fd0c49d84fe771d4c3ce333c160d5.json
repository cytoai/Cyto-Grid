{"ast":null,"code":"import _objectSpread from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js\";\nimport React from 'react';\nimport Item from './Item';\nimport { Grid, AutoSizer, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\n\nvar Items = function Items(props) {\n  var onmousedown = function onmousedown(imgId) {\n    props.selectItem(imgId);\n  };\n\n  var picturesPerRow = props.imagesPerRow;\n  var length = props.images.length;\n\n  var cellRenderer = function cellRenderer(_ref) {\n    var columnIndex = _ref.columnIndex,\n        key = _ref.key,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n\n    // Cell renderer for virtualized list\n    var newStyle = _objectSpread({}, style);\n\n    var newPicturesPerRow = picturesPerRow > length ? length : picturesPerRow;\n    var index = newPicturesPerRow * rowIndex - 1 + columnIndex + 1;\n\n    if (index > length - 1) {\n      return;\n    }\n\n    return React.createElement(\"div\", {\n      key: key,\n      style: newStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(Item, {\n      item: props.images[index],\n      containerStyle: style,\n      key: key,\n      selectedItems: props.selectedItems,\n      onmousedown: onmousedown,\n      ondrag: props.ondrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(AutoSizer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, function (_ref2) {\n    var height = _ref2.height,\n        width = _ref2.width;\n    var calculatedWidth = width - props.decreaseWidth;\n    var columnWidth = picturesPerRow > length ? calculatedWidth / length : calculatedWidth / picturesPerRow;\n    return React.createElement(Grid, {\n      cellRenderer: cellRenderer,\n      columnCount: picturesPerRow > length ? length : picturesPerRow,\n      columnWidth: columnWidth,\n      height: height,\n      rowCount: rowCount,\n      rowHeight: props.rowHeight,\n      width: calculatedWidth,\n      style: {\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Items;","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js"],"names":["React","Item","Grid","AutoSizer","CellMeasurer","CellMeasurerCache","Items","props","onmousedown","imgId","selectItem","picturesPerRow","imagesPerRow","length","images","cellRenderer","columnIndex","key","rowIndex","style","newStyle","newPicturesPerRow","index","selectedItems","ondrag","height","width","calculatedWidth","decreaseWidth","columnWidth","rowCount","rowHeight","outline"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,IAAT,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,iBAAzC,QAAiE,mBAAjE;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrB,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC3BF,IAAAA,KAAK,CAACG,UAAN,CAAiBD,KAAjB;AACH,GAFD;;AAIA,MAAME,cAAc,GAAGJ,KAAK,CAACK,YAA7B;AACA,MAAMC,MAAM,GAAGN,KAAK,CAACO,MAAN,CAAaD,MAA5B;;AAEA,MAAME,YAAY,GAAG,SAAfA,YAAe,OAAiD;AAAA,QAArCC,WAAqC,QAArCA,WAAqC;AAAA,QAAxBC,GAAwB,QAAxBA,GAAwB;AAAA,QAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,QAATC,KAAS,QAATA,KAAS;;AAClE;AACA,QAAIC,QAAQ,qBAAOD,KAAP,CAAZ;;AACA,QAAME,iBAAiB,GAAGV,cAAc,GAAGE,MAAjB,GAA0BA,MAA1B,GAAmCF,cAA7D;AACA,QAAMW,KAAK,GAAGD,iBAAiB,GAAGH,QAApB,GAA+B,CAA/B,GAAmCF,WAAnC,GAAiD,CAA/D;;AACA,QAAIM,KAAK,GAAGT,MAAM,GAAG,CAArB,EAAwB;AACtB;AACD;;AACD,WACI;AAAK,MAAA,GAAG,EAAEI,GAAV;AAAe,MAAA,KAAK,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAEb,KAAK,CAACO,MAAN,CAAaQ,KAAb,CADV;AAEI,MAAA,cAAc,EAAEH,KAFpB;AAGI,MAAA,GAAG,EAAEF,GAHT;AAII,MAAA,aAAa,EAAEV,KAAK,CAACgB,aAJzB;AAKI,MAAA,WAAW,EAAEf,WALjB;AAMI,MAAA,MAAM,EAAED,KAAK,CAACiB,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAYH,GApBD;;AAsBF,SACM,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,iBAAuB;AAAA,QAApBC,MAAoB,SAApBA,MAAoB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AACpB,QAAMC,eAAe,GAAGD,KAAK,GAAGnB,KAAK,CAACqB,aAAtC;AACA,QAAMC,WAAW,GAAGlB,cAAc,GAAGE,MAAjB,GAA0Bc,eAAe,GAACd,MAA1C,GAAmDc,eAAe,GAAChB,cAAvF;AACA,WAAQ,oBAAC,IAAD;AACJ,MAAA,YAAY,EAAEI,YADV;AAEJ,MAAA,WAAW,EAAEJ,cAAc,GAAGE,MAAjB,GAA0BA,MAA1B,GAAmCF,cAF5C;AAGJ,MAAA,WAAW,EAAEkB,WAHT;AAIJ,MAAA,MAAM,EAAEJ,MAJJ;AAKJ,MAAA,QAAQ,EAAEK,QALN;AAMJ,MAAA,SAAS,EAAEvB,KAAK,CAACwB,SANb;AAOJ,MAAA,KAAK,EAAEJ,eAPH;AAQJ,MAAA,KAAK,EAAE;AAACK,QAAAA,OAAO,EAAE;AAAV,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAUH,GAdL,CADN;AAkBD,CAhDD;;AAkDA,eAAe1B,KAAf","sourcesContent":["import React from 'react'\nimport Item from './Item'\nimport { Grid,  AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized';\n\nconst Items = (props) => {\n    const onmousedown = (imgId) => {\n        props.selectItem(imgId)\n    }\n\n    const picturesPerRow = props.imagesPerRow\n    const length = props.images.length\n  \n    const cellRenderer = function ({ columnIndex, key, rowIndex, style }) {\n        // Cell renderer for virtualized list\n        let newStyle = {...style}\n        const newPicturesPerRow = picturesPerRow > length ? length : picturesPerRow;\n        const index = newPicturesPerRow * rowIndex - 1 + columnIndex + 1;\n        if (index > length - 1) {\n          return;\n        }\n        return (\n            <div key={key} style={newStyle}>  \n                <Item\n                    item={props.images[index]}\n                    containerStyle={style}\n                    key={key} \n                    selectedItems={props.selectedItems} \n                    onmousedown={onmousedown} \n                    ondrag={props.ondrag}\n                />\n            </div>\n        )  \n    }\n       \n  return (\n        <AutoSizer>\n            {({ height, width }) => { \n                const calculatedWidth = width - props.decreaseWidth\n                const columnWidth = picturesPerRow > length ? calculatedWidth/length : calculatedWidth/picturesPerRow\n                return (<Grid\n                    cellRenderer={cellRenderer}\n                    columnCount={picturesPerRow > length ? length : picturesPerRow}\n                    columnWidth={columnWidth}\n                    height={height} \n                    rowCount={rowCount}\n                    rowHeight={props.rowHeight}\n                    width={calculatedWidth}\n                    style={{outline: \"none\"}}\n                />)\n            }}\n        </AutoSizer>\n  )\n}\n\nexport default Items\n"]},"metadata":{},"sourceType":"module"}