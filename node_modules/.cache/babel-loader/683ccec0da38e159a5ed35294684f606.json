{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/my-app/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    // Set global dragging state to true\n    if (props != null) {\n      console.log(props);\n    } //this.props.ondrag(true)  \n\n\n    return {\n      listId: props.listId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    // Set global dragging state to false\n    //this.props.ondrag(false)  \n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    var item = monitor.getItem();\n    console.log(item);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item() {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this));\n    _this.rotate = Math.random() * 10 - 20; // 5\n\n    _this.transform = \"transform 0.1s ease 0s\";\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.connectDragPreview(getEmptyImage(), {\n        captureDraggingState: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          listId = _this$props.listId,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource,\n          mousePosition = _this$props.mousePosition,\n          somethingIsDragging = _this$props.somethingIsDragging;\n      var dragStyle = null;\n\n      if (selectedItems.includes(listId)) {\n        var offset = getOffsetToMouse(listId, mousePosition);\n        var translate = \"translate(\" + offset.x + \"px, \" + offset.y + \"px) rotate(\" + this.rotate + \"deg)\";\n        dragStyle = {\n          zIndex: listId,\n          transform: translate,\n          transition: this.transform\n        };\n      }\n\n      console.log(somethingIsDragging);\n      return connectDragSource(React.createElement(\"li\", {\n        key: \"li\" + listId,\n        type: \"selectableElement\",\n        listid: listId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(listId);\n        },\n        className: selectedItems.includes(listId) ? \"selected\" : \"unselected\",\n        onDrag: ondrag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + listId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        style: {\n          position: \"absolute\",\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        key: \"img\" + listId + \"dragging\",\n        id: \"dragPreview\" + String(listId),\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        style: dragStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"Item\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/my-app/src/Item.js"],"names":["React","Component","DragSource","getOffsetToMouse","getEmptyImage","itemSource","beginDrag","props","console","log","listId","selectedItems","endDrag","monitor","component","didDrop","item","getItem","collect","connect","connectDragSource","dragSource","isDragging","connectDragPreview","dragPreview","Item","rotate","Math","random","transform","captureDraggingState","onmousedown","mousePosition","somethingIsDragging","dragStyle","includes","offset","translate","x","y","zIndex","transition","ondrag","position","String"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\n\nconst itemSource = {\n    beginDrag(props) {\n      // Set global dragging state to true\n      if(props != null){      console.log(props)\n      }\n      //this.props.ondrag(true)  \n      return {\n        listId: props.listId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        // Set global dragging state to false\n        //this.props.ondrag(false)  \n        if (!monitor.didDrop()) {\n          return;\n        }\n        const item = monitor.getItem();\n        console.log(item)\n    },\n\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        connectDragPreview: connect.dragPreview()\n    };\n}\n\nclass Item extends Component {  \n    constructor(){\n        super()\n        this.rotate = Math.random() * 10 - 20 // 5\n        this.transform = \"transform 0.1s ease 0s\"\n        \n    }\n    \n    componentDidMount() {\n        this.props.connectDragPreview(getEmptyImage(), {\n            captureDraggingState: true,\n        })\n    }\n\n    render () {\n        const { listId, selectedItems, onmousedown, connectDragSource, mousePosition, somethingIsDragging} = this.props\n        let dragStyle = null\n        if(selectedItems.includes(listId)){\n            const offset = getOffsetToMouse(listId, mousePosition)\n            const translate = \"translate(\" + offset.x + \"px, \" + offset.y + \"px) rotate(\" + this.rotate + \"deg)\"\n            dragStyle = {zIndex: listId, transform: translate, transition: this.transform}\n        }\n        console.log(somethingIsDragging)\n        return connectDragSource(\n            <li key={\"li\" + listId} type={\"selectableElement\"} listid={listId} onMouseDown={() => onmousedown(listId)} className={selectedItems.includes(listId) ? \"selected\" : \"unselected\"} onDrag={ondrag}>\n                <img key={\"img\" + listId} type={\"selectableElement\"} alt=\"foo\" src=\"https://place-hold.it/256x256\" style={{position: \"absolute\", zIndex: 1}}/>\n                <img key={\"img\" + listId + \"dragging\"} id={\"dragPreview\" + String(listId)} alt=\"foo\" src=\"https://place-hold.it/256x256\" style={dragStyle}/>\n            </li>\n        )\n    }\n}\n\nexport default DragSource(\"Item\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}