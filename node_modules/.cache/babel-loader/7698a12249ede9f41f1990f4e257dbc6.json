{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/my-app/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      listId: props.listId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    var item = monitor.getItem();\n    console.log(item);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragPreview: connect.dragPreview(),\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item() {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this));\n    _this.state = {\n      style: {\n        prevMousePosition: {},\n        transform: \"translate3d(0,0)\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          listId = _this$props.listId,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource,\n          isDragging = _this$props.isDragging,\n          mousePosition = _this$props.mousePosition;\n\n      if (isDragging) {\n        getOffsetToMouse(listId, mousePosition);\n      }\n\n      return connectDragSource(React.createElement(\"li\", {\n        key: \"li\" + listId,\n        type: \"selectableElement\",\n        listid: listId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(listId);\n        },\n        className: selectedItems.includes(listId) ? \"selected\" : \"unselected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + listId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        key: \"img\" + listId + \"dragging\",\n        id: \"dragPreview\" + String(listId),\n        ype: \"selectableElement\",\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        style: isDragging ? this.state.syle : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.prevMousePosition !== props.mousePosition) {\n        return {\n          style: \"translate3d(0,0)\",\n          prevMousePosition: props.mousePosition\n        };\n      }\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"Item\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/my-app/src/Item.js"],"names":["React","Component","DragSource","getOffsetToMouse","itemSource","beginDrag","props","listId","selectedItems","endDrag","monitor","component","didDrop","item","getItem","console","log","collect","connect","connectDragPreview","dragPreview","connectDragSource","dragSource","isDragging","Item","state","style","prevMousePosition","transform","onmousedown","mousePosition","includes","String","syle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js'\n\nconst itemSource = {\n    beginDrag(props) {\n      return {\n        listId: props.listId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        if (!monitor.didDrop()) {\n          return;\n        }\n        const item = monitor.getItem();\n        console.log(item)\n    }\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragPreview: connect.dragPreview(),\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass Item extends Component { \n    \n    constructor(){\n        super()\n        this.state ={\n            style:{\n                prevMousePosition: {},\n                transform: \"translate3d(0,0)\"\n            }\n        }\n    }\n\n    static getDerivedStateFromProps(props, state){\n        if(state.prevMousePosition !== props.mousePosition){\n            return {\n                style: \"translate3d(0,0)\",\n                prevMousePosition: props.mousePosition\n            }\n        }\n    }\n\n\n    render () {\n        const { listId, selectedItems, onmousedown, connectDragSource, isDragging, mousePosition} = this.props\n\n        if(isDragging){\n            getOffsetToMouse(listId, mousePosition)\n        }\n        \n        return connectDragSource(\n            <li key={\"li\" + listId} type={\"selectableElement\"} listid={listId} onMouseDown={() => onmousedown(listId)} className={selectedItems.includes(listId) ? \"selected\" : \"unselected\"}>\n                <img key={\"img\" + listId} type={\"selectableElement\"} alt=\"foo\" src=\"https://place-hold.it/256x256\" />\n                <img key={\"img\" + listId + \"dragging\"} id={\"dragPreview\" + String(listId)} ype={\"selectableElement\"} alt=\"foo\" src=\"https://place-hold.it/256x256\" style={isDragging ? this.state.syle : null}/>\n            </li>\n        )\n    }\n}\n\nexport default DragSource(\"Item\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}