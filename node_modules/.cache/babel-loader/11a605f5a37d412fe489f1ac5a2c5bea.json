{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/windowing/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    // Set global dragging state to true\n    props.ondrag(true);\n    return {\n      listId: props.listId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    // Set global dragging state to false\n    props.ondrag(false);\n\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    var item = monitor.getItem();\n    console.log(item);\n  },\n  isDragging: function isDragging(props, monitor) {}\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nfunction getItemStyle(offsetX, offsetY, rotate, transform) {\n  var translate = \"translate(\" + offsetX + \"px, \" + offsetY + \"px) rotate(\" + rotate + \"deg)\";\n  return {\n    ransform: translate,\n    transition: this.transform\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item() {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this));\n    _this.rotate = Math.random() * 10 - 20; // 5\n\n    _this.transform = \"transform 0.1s ease 0s\";\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.selectedItems.includes(this.props.listId) !== this.props.selectedItems.includes(this.props.listId)) {\n        return true;\n      } else if (nextProps.selectedItems.includes(this.props.listId) && this.props.somethingIsDragging) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.connectDragPreview(getEmptyImage(), {\n        captureDraggingState: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          listId = _this$props.listId,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource,\n          mousePosition = _this$props.mousePosition,\n          somethingIsDragging = _this$props.somethingIsDragging;\n      var dragStyle = {}; // Check if item is selected and somehting is dragging \n\n      if (selectedItems.includes(listId) && somethingIsDragging) {\n        var offset = getOffsetToMouse(listId, mousePosition);\n        dragStyle = getItemStyle(offset.x, offset.y, this.rotate, this.transform);\n      }\n\n      return connectDragSource(React.createElement(\"div\", {\n        name: \"selectableElement\",\n        key: \"li\" + listId,\n        type: \"selectableElement\",\n        listid: listId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(listId);\n        },\n        className: selectedItems.includes(listId) ? \"selected\" : \"unselected\",\n        onDrag: ondrag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + listId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        style: {\n          position: \"absolute\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        key: \"img\" + listId + \"dragging\",\n        id: \"dragPreview\" + String(listId),\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        style: dragStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"Item\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/windowing/src/Item.js"],"names":["React","Component","DragSource","getOffsetToMouse","getEmptyImage","itemSource","beginDrag","props","ondrag","listId","selectedItems","endDrag","monitor","component","didDrop","item","getItem","console","log","isDragging","collect","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","getItemStyle","offsetX","offsetY","rotate","transform","translate","ransform","transition","Item","Math","random","nextProps","nextState","includes","somethingIsDragging","captureDraggingState","onmousedown","mousePosition","dragStyle","offset","x","y","position","String"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getOffsetToMouse } from './helper.js'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\n\nconst itemSource = {\n    beginDrag(props) {\n      // Set global dragging state to true\n      props.ondrag(true)\n      return {\n        listId: props.listId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        // Set global dragging state to false\n        props.ondrag(false)  \n        if (!monitor.didDrop()) {\n          return;\n        }\n        const item = monitor.getItem();\n        console.log(item)\n    },\n    isDragging(props, monitor){\n    }\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        connectDragPreview: connect.dragPreview()\n    };\n}\n\nfunction getItemStyle(offsetX, offsetY, rotate, transform){\n    const translate = \"translate(\" + offsetX + \"px, \" + offsetY + \"px) rotate(\" + rotate + \"deg)\"\n    return {ransform: translate, transition: this.transform}\n}\n\nclass Item extends Component {  \n    constructor(){\n        super()\n        this.rotate = Math.random() * 10 - 20 // 5\n        this.transform = \"transform 0.1s ease 0s\"   \n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextProps.selectedItems.includes(this.props.listId) !== this.props.selectedItems.includes(this.props.listId)){\n            return true\n        }\n        else if(nextProps.selectedItems.includes(this.props.listId) && this.props.somethingIsDragging){\n            return true\n        }\n        return false\n    }\n    \n    componentDidMount() {\n        this.props.connectDragPreview(getEmptyImage(), {\n            captureDraggingState: true,\n        })\n    }\n\n    render () {\n        const { listId, selectedItems, onmousedown, connectDragSource, mousePosition, somethingIsDragging} = this.props\n        let dragStyle = {}\n        // Check if item is selected and somehting is dragging \n        if(selectedItems.includes(listId) && somethingIsDragging){\n            const offset = getOffsetToMouse(listId, mousePosition)\n            dragStyle = getItemStyle(offset.x, offset.y, this.rotate, this.transform)\n        }\n        return connectDragSource(\n            <div name={\"selectableElement\"} key={\"li\" + listId} type={\"selectableElement\"} listid={listId} onMouseDown={() => onmousedown(listId)} className={selectedItems.includes(listId) ? \"selected\" : \"unselected\"} onDrag={ondrag}>\n                <img key={\"img\" + listId} type={\"selectableElement\"} alt=\"foo\" src=\"https://place-hold.it/256x256\" style={{position: \"absolute\"}}/>\n                <img key={\"img\" + listId + \"dragging\"} id={\"dragPreview\" + String(listId)} alt=\"foo\" src=\"https://place-hold.it/256x256\" style={dragStyle}/>\n            </div>\n        )\n    }\n}\n\nexport default DragSource(\"Item\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}