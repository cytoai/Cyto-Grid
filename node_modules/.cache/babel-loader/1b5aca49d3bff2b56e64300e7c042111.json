{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/my-app/src/Gallery.js\";\nimport React, { Component } from 'react';\nimport './Gallery.css';\nimport Items from './Items.js';\nimport Target from './Target.js';\nimport Selectionbox from './Selectionbox.js';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\nimport { collisionDetection } from './helper.js';\n\nvar Gallery =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Gallery, _Component);\n\n  function Gallery() {\n    var _this;\n\n    _classCallCheck(this, Gallery);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Gallery).call(this));\n\n    _this.onmousedown = function (e) {\n      // Only activate selection box when not dragging on a selectable item\n      if (e.target.getAttribute(\"type\") !== \"selectableElement\") {\n        var currentMousePosition = _this.state.mousePosition;\n        currentMousePosition.x1 = e.clientX; //Set the initial X\n\n        currentMousePosition.y1 = e.clientY; //Set the initial Y\n\n        _this.setState({\n          mousePosition: currentMousePosition\n        });\n      }\n    };\n\n    _this.onmousemove = function (e) {\n      // Always update mouse position\n      _this.setState({\n        visibility: \"visible\"\n      });\n\n      var currentMousePosition = _this.state.mousePosition;\n      currentMousePosition.x2 = e.clientX;\n      currentMousePosition.y2 = e.clientY;\n\n      _this.setState({\n        mousePosition: currentMousePosition\n      }); // Only check for collisions if selection box is active\n\n\n      var collisions = collisionDetection(currentMousePosition);\n\n      _this.setState({\n        selected: collisions\n      });\n    };\n\n    _this.onmouseup = function (e) {\n      console.log(_this.state.visibility);\n\n      if (e.target.getAttribute(\"type\") !== \"selectableElement\") {\n        _this.setState({\n          selected: []\n        });\n\n        _this.setState({\n          visibility: \"hidden\"\n        });\n      }\n    };\n\n    _this.selectItem = function (listId) {\n      // Set selected items\n      _this.setState({\n        selected: [listId]\n      });\n    };\n\n    _this.state = {\n      selected: [],\n      mousePosition: {\n        x1: 0,\n        x2: 0,\n        y1: 0,\n        y2: 0\n      },\n      visibility: \"hidden\"\n    };\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        type: \"container\",\n        onMouseDown: this.onmousedown,\n        onMouseMove: this.onmousemove,\n        onMouseUp: this.onmouseup,\n        onClick: this.onclick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Selectionbox, {\n        mousePosition: this.state.mousePosition,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(Target, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Items, {\n        selectItem: this.selectItem,\n        selectedItems: this.state.selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Gallery;\n}(Component);\n\nexport default DragDropContext(HTML5Backend)(Gallery);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/my-app/src/Gallery.js"],"names":["React","Component","Items","Target","Selectionbox","HTML5Backend","DragDropContext","collisionDetection","Gallery","onmousedown","e","target","getAttribute","currentMousePosition","state","mousePosition","x1","clientX","y1","clientY","setState","onmousemove","visibility","x2","y2","collisions","selected","onmouseup","console","log","selectItem","listId","onclick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Gallery.css';\nimport Items from './Items.js'\nimport Target from './Target.js'\nimport Selectionbox from './Selectionbox.js'\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext } from 'react-dnd'\nimport { collisionDetection } from './helper.js'\n\n\n\nclass Gallery extends Component {\n    constructor(){\n      super()\n      this.state = {\n          selected: [],\n          mousePosition: {\n              x1: 0,\n              x2: 0,\n              y1: 0,\n              y2: 0,\n          },\n          visibility: \"hidden\",\n      }\n    }\n\n    onmousedown = (e) => {\n        // Only activate selection box when not dragging on a selectable item\n        if(e.target.getAttribute(\"type\") !== \"selectableElement\"){\n            let currentMousePosition = this.state.mousePosition\n            currentMousePosition.x1 = e.clientX; //Set the initial X\n            currentMousePosition.y1 = e.clientY; //Set the initial Y\n            this.setState({mousePosition: currentMousePosition})\n        }\n    };\n\n    onmousemove = (e) => {\n        // Always update mouse position\n        this.setState({visibility: \"visible\"})\n        let currentMousePosition = this.state.mousePosition\n        currentMousePosition.x2 = e.clientX; \n        currentMousePosition.y2 = e.clientY; \n        this.setState({mousePosition: currentMousePosition})\n        // Only check for collisions if selection box is active\n            const collisions = collisionDetection(currentMousePosition)\n            this.setState({selected: collisions})\n        \n    };\n\n    onmouseup = (e) => {\n\n     console.log(this.state.visibility)\n\n        if(e.target.getAttribute(\"type\") !== \"selectableElement\"){\n            this.setState({selected: []})\n            this.setState({visibility: \"hidden\"})\n        }\n\n    }\n\n    selectItem = (listId) => {\n        // Set selected items\n        this.setState({selected: [listId]})\n    }\n\n \n\n    render() {\n        return (\n            <div type=\"container\" onMouseDown={this.onmousedown} onMouseMove={this.onmousemove} onMouseUp={this.onmouseup} onClick={this.onclick}>\n                  <Selectionbox mousePosition={this.state.mousePosition} visibility={this.state.visibility} />\n                  <Target/>\n                <ul>\n                  <Items selectItem={this.selectItem} selectedItems={this.state.selected}/>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default DragDropContext(HTML5Backend)(Gallery);\n"]},"metadata":{},"sourceType":"module"}