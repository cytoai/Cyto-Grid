{"ast":null,"code":"import _objectSpread from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js\";\nimport React from 'react';\nimport Item from './Item';\nimport { Grid, AutoSizer } from 'react-virtualized';\n\nvar Items = function Items(props) {\n  var onmousedown = function onmousedown(listId) {\n    props.selectItem(listId);\n  };\n\n  var picturesPerRow = 30;\n  var quotient = Math.floor(props.images.length / picturesPerRow);\n  var remainder = props.images.length % picturesPerRow;\n  var rowCount = quotient;\n\n  if (remainder > 0) {\n    rowCount = rowCount + 1;\n  }\n\n  var cellRenderer = function cellRenderer(_ref) {\n    var columnIndex = _ref.columnIndex,\n        key = _ref.key,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n\n    // Cell renderer for virtualized list\n    var newStyle = _objectSpread({}, style);\n\n    if (rowIndex === rowCount - 1 && columnIndex > remainder - 1) {\n      return;\n    }\n\n    return React.createElement(\"div\", {\n      key: key,\n      style: newStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Item, {\n      containerStyle: style,\n      key: key,\n      listId: key,\n      selectedItems: props.selectedItems,\n      onmousedown: onmousedown,\n      ondrag: props.ondrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(AutoSizer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, function (_ref2) {\n    var height = _ref2.height,\n        width = _ref2.width;\n    var columnWidth = picturesPerRow > props.images.length ? width / props.images.length : width / picturesPerRow;\n    return React.createElement(Grid, {\n      cellRenderer: cellRenderer,\n      columnCount: picturesPerRow > props.images.length ? props.images.length : picturesPerRow,\n      columnWidth: columnWidth,\n      height: height\n      /* This needs to be replaced dynamically in future */\n      ,\n      rowCount: rowCount,\n      rowHeight: 300,\n      width: width\n      /* This needs to be replaced dynamically in future */\n      ,\n      style: {\n        zIndex: 1,\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Items;","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js"],"names":["React","Item","Grid","AutoSizer","Items","props","onmousedown","listId","selectItem","picturesPerRow","quotient","Math","floor","images","length","remainder","rowCount","cellRenderer","columnIndex","key","rowIndex","style","newStyle","selectedItems","ondrag","height","width","columnWidth","zIndex","outline"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,IAAT,EAAgBC,SAAhB,QAAiC,mBAAjC;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrB,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC5BF,IAAAA,KAAK,CAACG,UAAN,CAAiBD,MAAjB;AACH,GAFD;;AAGA,MAAME,cAAc,GAAG,EAAvB;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACQ,MAAN,CAAaC,MAAb,GAAoBL,cAA/B,CAAjB;AACA,MAAMM,SAAS,GAAGV,KAAK,CAACQ,MAAN,CAAaC,MAAb,GAAsBL,cAAxC;AACA,MAAIO,QAAQ,GAAGN,QAAf;;AACA,MAAIK,SAAS,GAAG,CAAhB,EAAmB;AACfC,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAtB;AACH;;AAED,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAAiD;AAAA,QAArCC,WAAqC,QAArCA,WAAqC;AAAA,QAAxBC,GAAwB,QAAxBA,GAAwB;AAAA,QAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,QAATC,KAAS,QAATA,KAAS;;AAClE;AACA,QAAIC,QAAQ,qBAAMD,KAAN,CAAZ;;AACA,QAAGD,QAAQ,KAAKJ,QAAQ,GAAC,CAAtB,IAA2BE,WAAW,GAAGH,SAAS,GAAC,CAAtD,EAAwD;AACpD;AACH;;AACD,WACA;AAAK,MAAA,GAAG,EAAEI,GAAV;AAAe,MAAA,KAAK,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACI,MAAA,cAAc,EAAED,KADpB;AAEI,MAAA,GAAG,EAAEF,GAFT;AAGI,MAAA,MAAM,EAAEA,GAHZ;AAII,MAAA,aAAa,EAAEd,KAAK,CAACkB,aAJzB;AAKI,MAAA,WAAW,EAAEjB,WALjB;AAMI,MAAA,MAAM,EAAED,KAAK,CAACmB,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA;AAYH,GAlBD;;AAoBF,SACM,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,iBAAuB;AAAA,QAApBC,MAAoB,SAApBA,MAAoB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AACpB,QAAIC,WAAW,GAAGlB,cAAc,GAAGJ,KAAK,CAACQ,MAAN,CAAaC,MAA9B,GAAuCY,KAAK,GAACrB,KAAK,CAACQ,MAAN,CAAaC,MAA1D,GAAmEY,KAAK,GAACjB,cAA3F;AACA,WAAQ,oBAAC,IAAD;AACJ,MAAA,YAAY,EAAEQ,YADV;AAEJ,MAAA,WAAW,EAAER,cAAc,GAAGJ,KAAK,CAACQ,MAAN,CAAaC,MAA9B,GAAuCT,KAAK,CAACQ,MAAN,CAAaC,MAApD,GAA6DL,cAFtE;AAGJ,MAAA,WAAW,EAAEkB,WAHT;AAIJ,MAAA,MAAM,EAAEF;AAAQ;AAJZ;AAKJ,MAAA,QAAQ,EAAET,QALN;AAMJ,MAAA,SAAS,EAAE,GANP;AAOJ,MAAA,KAAK,EAAEU;AAAO;AAPV;AAQJ,MAAA,KAAK,EAAE;AAACE,QAAAA,MAAM,EAAE,CAAT;AAAYC,QAAAA,OAAO,EAAE;AAArB,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAUH,GAbL,CADN;AAiBD,CAjDD;;AAmDA,eAAezB,KAAf","sourcesContent":["import React from 'react'\nimport Item from './Item'\nimport { Grid,  AutoSizer } from 'react-virtualized';\n\n\nconst Items = (props) => {\n    const onmousedown = (listId) => {\n        props.selectItem(listId)\n    }\n    const picturesPerRow = 30\n    const quotient = Math.floor(props.images.length/picturesPerRow);\n    const remainder = props.images.length % picturesPerRow;\n    let rowCount = quotient\n    if( remainder > 0 ){\n        rowCount = rowCount + 1\n    }\n\n    const cellRenderer = function ({ columnIndex, key, rowIndex, style }) {\n        // Cell renderer for virtualized list\n        let newStyle ={...style}\n        if(rowIndex === rowCount-1 && columnIndex > remainder-1){\n            return\n        }\n        return (\n        <div key={key} style={newStyle}>  \n            <Item\n                containerStyle={style}\n                key={key} \n                listId={key} \n                selectedItems={props.selectedItems} \n                onmousedown={onmousedown} \n                ondrag={props.ondrag}\n            />\n        </div>\n        )  \n    }\n       \n  return (\n        <AutoSizer>\n            {({ height, width }) => { \n                let columnWidth = picturesPerRow > props.images.length ? width/props.images.length : width/picturesPerRow\n                return (<Grid\n                    cellRenderer={cellRenderer}\n                    columnCount={picturesPerRow > props.images.length ? props.images.length : picturesPerRow}\n                    columnWidth={columnWidth}\n                    height={height} /* This needs to be replaced dynamically in future */\n                    rowCount={rowCount}\n                    rowHeight={300}\n                    width={width} /* This needs to be replaced dynamically in future */\n                    style={{zIndex: 1, outline: \"none\"}}\n                />)\n            }}\n        </AutoSizer>\n  )\n}\n\nexport default Items\n"]},"metadata":{},"sourceType":"module"}