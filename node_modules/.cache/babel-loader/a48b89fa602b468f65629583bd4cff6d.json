{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    var imgId = props.item.id; // Set global dragged item to this item\n\n    props.ondrag(imgId);\n    return {\n      imgId: imgId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    // Set dragged item to null\n    props.ondrag(null);\n\n    if (!monitor.didDrop()) {\n      return;\n    }\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item(props) {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this, props));\n    _this.state = {\n      src: null\n    };\n    _this.asyncDatabaseRequest = _this.asyncDatabaseRequest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.connectDragPreview(getEmptyImage(), {\n        captureDraggingState: true\n      });\n      this.asyncDatabaseRequest(this.props.item.id);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.src === null) {\n        this.asyncDatabaseRequest(this.props.item.id);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._asyncRequest) {\n        this._asyncRequest.cancel();\n      }\n    }\n  }, {\n    key: \"asyncDatabaseRequest\",\n    value: function asyncDatabaseRequest(id) {\n      if (typeof this.props.asyncImgLoadingFunc === \"function\") {\n        this.props.asyncImgLoadingFunc(id, this);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource,\n          containerStyle = _this$props.containerStyle,\n          item = _this$props.item;\n      var imgId = String(item.id);\n      var imgSrc = item.src;\n      return connectDragSource(React.createElement(\"div\", {\n        key: \"li\" + imgId,\n        name: \"selectableElement\",\n        type: \"selectableElement\",\n        imgid: imgId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(imgId);\n        },\n        className: selectedItems.includes(imgId) ? \"selected\" : \"unselected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + imgId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: this.state.src === null ? imgSrc : this.state.src,\n        style: {\n          objectPosition: \"0 0\",\n          backgroundColor: \"#F5F5F5\",\n          width: 0.8 * containerStyle.width,\n          height: 0.8 * containerStyle.height,\n          objectFit: \"contain\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // Store previousChecksum in state so we can compare when props change.\n      // Clear out previously-loaded data (so we don't render stale stuff).\n      if (props.item.id !== state.previousId) {\n        return {\n          src: null,\n          previousId: props.item.id\n        };\n      } // No state update necessary\n\n\n      return null;\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"SelectedItems\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Item.js"],"names":["React","Component","DragSource","getEmptyImage","itemSource","beginDrag","props","imgId","item","id","ondrag","selectedItems","endDrag","monitor","component","didDrop","collect","connect","connectDragSource","dragSource","isDragging","connectDragPreview","dragPreview","Item","state","src","asyncDatabaseRequest","bind","captureDraggingState","prevProps","prevState","_asyncRequest","cancel","asyncImgLoadingFunc","onmousedown","containerStyle","String","imgSrc","includes","objectPosition","backgroundColor","width","height","objectFit","previousId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst itemSource = {\n    beginDrag(props) {\n      const imgId = props.item.id\n      // Set global dragged item to this item\n      props.ondrag(imgId)\n      return {\n        imgId: imgId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        // Set dragged item to null\n        props.ondrag(null)  \n        if (!monitor.didDrop()) {\n          return;\n        }\n    },\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        connectDragPreview: connect.dragPreview()\n    };\n}\n    \nclass Item extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            src: null,\n        };\n        this.asyncDatabaseRequest = this.asyncDatabaseRequest.bind(this);\n    }\n    \n    static getDerivedStateFromProps(props, state) {\n        // Store previousChecksum in state so we can compare when props change.\n        // Clear out previously-loaded data (so we don't render stale stuff).\n        if (props.item.id !== state.previousId) {\n            return {\n                src: null,\n                previousId: props.item.id\n            };\n        }\n        // No state update necessary\n        return null;\n    }\n    \n    componentDidMount() {\n        this.props.connectDragPreview(getEmptyImage(), {\n            captureDraggingState: true,\n        })\n        this.asyncDatabaseRequest(this.props.item.id);\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.src === null) {this.asyncDatabaseRequest(this.props.item.id);}\n    }\n    \n    componentWillUnmount() {\n        if (this._asyncRequest) {this._asyncRequest.cancel();}\n    }\n    \n    asyncDatabaseRequest(id) {\n        if (typeof this.props.asyncImgLoadingFunc === \"function\") { \n            this.props.asyncImgLoadingFunc(id, this)\n        }\n    }     \n    render () {\n        const { selectedItems, onmousedown, connectDragSource, containerStyle, item} = this.props\n        const imgId = String(item.id)\n        const imgSrc = item.src\n        return connectDragSource(\n            <div key={\"li\" + imgId} name={\"selectableElement\"}  type={\"selectableElement\"} imgid={imgId} onMouseDown={() => onmousedown(imgId)} className={selectedItems.includes(imgId) ? \"selected\" : \"unselected\"}>\n                <img key={\"img\" + imgId} type={\"selectableElement\"} alt=\"foo\" src={this.state.src === null ? imgSrc : this.state.src} style={{objectPosition: \"0 0\", backgroundColor: \"#F5F5F5\", width: 0.8 * containerStyle.width, height: 0.8 * containerStyle.height, objectFit: \"contain\"}}/>\n            </div>\n        )\n    }\n}\n\nexport default DragSource(\"SelectedItems\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}