{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/windowing/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/windowing/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    // Set global dragging state to true\n    props.ondrag(props.listId); // Change style of virtualized grid to make overflow visible\n\n    document.getElementsByClassName(\"ReactVirtualized__Grid\")[0].style.overflow = \"visible\";\n    document.getElementsByClassName(\"ReactVirtualized__Grid__innerScrollContainer\")[0].style.overflow = \"visible\";\n    return {\n      listId: props.listId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    // Set global dragging state to false\n    props.ondrag(false); // Change style of virtualized grid to make overflow hidden\n\n    document.getElementsByClassName(\"ReactVirtualized__Grid\")[0].style.overflow = \"hidden auto\";\n    document.getElementsByClassName(\"ReactVirtualized__Grid__innerScrollContainer\")[0].style.overflow = \"hidden\";\n\n    if (!monitor.didDrop()) {\n      return;\n    }\n\n    var item = monitor.getItem();\n    console.log(item);\n  },\n  isDragging: function isDragging(props, monitor) {}\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item() {\n    var _this;\n\n    _classCallCheck(this, Item);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Item).call(this));\n    _this.rotate = Math.random() * 10 - 20;\n    _this.transform = \"transform 1s ease 0s\";\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // Check if select state of item has changed\n      if (nextProps.selectedItems.includes(this.props.listId) !== this.props.selectedItems.includes(this.props.listId)) {\n        return true;\n      } // Otherwise dont update component\n\n\n      return false;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.connectDragPreview(getEmptyImage(), {\n        captureDraggingState: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          listId = _this$props.listId,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource;\n      return connectDragSource(React.createElement(\"div\", {\n        name: \"selectableElement\",\n        key: \"li\" + listId,\n        type: \"selectableElement\",\n        listid: listId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(listId);\n        },\n        className: selectedItems.includes(listId) ? \"selected\" : \"unselected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + listId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: \"https://place-hold.it/256x256\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"Item\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/windowing/src/Item.js"],"names":["React","Component","DragSource","getEmptyImage","itemSource","beginDrag","props","ondrag","listId","document","getElementsByClassName","style","overflow","selectedItems","endDrag","monitor","component","didDrop","item","getItem","console","log","isDragging","collect","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","Item","rotate","Math","random","transform","nextProps","nextState","includes","captureDraggingState","onmousedown"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst itemSource = {\n    beginDrag(props) {\n      // Set global dragging state to true\n      props.ondrag(props.listId)\n      // Change style of virtualized grid to make overflow visible\n      document.getElementsByClassName(\"ReactVirtualized__Grid\")[0].style.overflow = \"visible\"\n      document.getElementsByClassName(\"ReactVirtualized__Grid__innerScrollContainer\")[0].style.overflow = \"visible\"\n      return {\n        listId: props.listId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        // Set global dragging state to false\n        props.ondrag(false)  \n        // Change style of virtualized grid to make overflow hidden\n        document.getElementsByClassName(\"ReactVirtualized__Grid\")[0].style.overflow = \"hidden auto\"\n        document.getElementsByClassName(\"ReactVirtualized__Grid__innerScrollContainer\")[0].style.overflow = \"hidden\"\n        if (!monitor.didDrop()) {\n          return;\n        }\n        const item = monitor.getItem();\n        console.log(item)\n    },\n    isDragging(props, monitor){\n    }\n\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        connectDragPreview: connect.dragPreview()\n    };\n}\n    \nclass Item extends Component {  \n    constructor(){\n        super()\n        this.rotate = Math.random() * 10 - 20\n        this.transform = \"transform 1s ease 0s\"   \n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // Check if select state of item has changed\n        if(nextProps.selectedItems.includes(this.props.listId) !== this.props.selectedItems.includes(this.props.listId)){\n            return true\n        }\n        // Otherwise dont update component\n        return false\n    }\n    \n    componentDidMount() {\n        this.props.connectDragPreview(getEmptyImage(), {\n            captureDraggingState: true,\n        })\n    }\n\n    render () {\n        const { listId, selectedItems, onmousedown, connectDragSource} = this.props\n\n        return connectDragSource(\n            <div name={\"selectableElement\"} key={\"li\" + listId} type={\"selectableElement\"} listid={listId} onMouseDown={() => onmousedown(listId)} className={selectedItems.includes(listId) ? \"selected\" : \"unselected\"}>\n                <img key={\"img\" + listId} type={\"selectableElement\"} alt=\"foo\" src=\"https://place-hold.it/256x256\"/>\n            </div>\n        )\n    }\n}\n\nexport default DragSource(\"Item\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}