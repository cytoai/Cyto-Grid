{"ast":null,"code":"import _classCallCheck from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Item.js\";\nimport React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nvar itemSource = {\n  beginDrag: function beginDrag(props) {\n    var imgId = props.images[props.index].id; // Set global dragged item to this item\n\n    props.ondrag(imgId);\n    return {\n      imgId: imgId,\n      selectedItems: props.selectedItems\n    };\n  },\n  endDrag: function endDrag(props, monitor, component) {\n    // Set dragged item to null\n    props.ondrag(null);\n\n    if (!monitor.didDrop()) {\n      return;\n    }\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    connectDragPreview: connect.dragPreview()\n  };\n}\n\nvar Item =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Item, _Component);\n\n  function Item() {\n    _classCallCheck(this, Item);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Item).apply(this, arguments));\n  }\n\n  _createClass(Item, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.connectDragPreview(getEmptyImage(), {\n        captureDraggingState: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          selectedItems = _this$props.selectedItems,\n          onmousedown = _this$props.onmousedown,\n          connectDragSource = _this$props.connectDragSource,\n          containerStyle = _this$props.containerStyle,\n          images = _this$props.images,\n          index = _this$props.index;\n      var imgId = String(images[index].id);\n      var imgSrc = images[index].src;\n      return connectDragSource(React.createElement(\"div\", {\n        key: \"li\" + imgId,\n        name: \"selectableElement\",\n        type: \"selectableElement\",\n        imgid: imgId,\n        onMouseDown: function onMouseDown() {\n          return onmousedown(imgId);\n        },\n        className: selectedItems.includes(imgId) ? \"selected\" : \"unselected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        key: \"img\" + imgId,\n        type: \"selectableElement\",\n        alt: \"foo\",\n        src: imgSrc,\n        style: {\n          objectPosition: \"0 0\",\n          backgroundColor: \"#F5F5F5\",\n          width: 0.8 * containerStyle.width,\n          height: 0.8 * containerStyle.height,\n          objectFit: \"contain\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Item;\n}(Component);\n\nexport default DragSource(\"SelectedItems\", itemSource, collect)(Item);","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Item.js"],"names":["React","Component","DragSource","getEmptyImage","itemSource","beginDrag","props","imgId","images","index","id","ondrag","selectedItems","endDrag","monitor","component","didDrop","collect","connect","connectDragSource","dragSource","isDragging","connectDragPreview","dragPreview","Item","captureDraggingState","onmousedown","containerStyle","String","imgSrc","src","includes","objectPosition","backgroundColor","width","height","objectFit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst itemSource = {\n    beginDrag(props) {\n      const imgId = props.images[props.index].id\n      // Set global dragged item to this item\n      props.ondrag(imgId)\n      return {\n        imgId: imgId,\n        selectedItems: props.selectedItems\n      };\n    },\n    endDrag(props, monitor, component) {\n        // Set dragged item to null\n        props.ondrag(null)  \n        if (!monitor.didDrop()) {\n          return;\n        }\n    },\n};\n  \nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging(),\n        connectDragPreview: connect.dragPreview()\n    };\n}\n    \nclass Item extends Component {     \n    componentDidMount() {\n        this.props.connectDragPreview(getEmptyImage(), {\n            captureDraggingState: true,\n        })\n    }\n\n    render () {\n        const { selectedItems, onmousedown, connectDragSource, containerStyle, images, index} = this.props\n        const imgId = String(images[index].id)\n        const imgSrc = images[index].src\n        return connectDragSource(\n            <div key={\"li\" + imgId} name={\"selectableElement\"}  type={\"selectableElement\"} imgid={imgId} onMouseDown={() => onmousedown(imgId)} className={selectedItems.includes(imgId) ? \"selected\" : \"unselected\"}>\n                <img key={\"img\" + imgId} type={\"selectableElement\"} alt=\"foo\" src={imgSrc} style={{objectPosition: \"0 0\", backgroundColor: \"#F5F5F5\", width: 0.8 * containerStyle.width, height: 0.8 * containerStyle.height, objectFit: \"contain\"}}/>\n            </div>\n        )\n    }\n}\n\nexport default DragSource(\"SelectedItems\", itemSource, collect)(Item)\n"]},"metadata":{},"sourceType":"module"}