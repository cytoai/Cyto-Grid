{"ast":null,"code":"import _objectSpread from \"/Users/cfriedri/Documents/work/Cyto-Grid/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js\";\nimport React from 'react';\nimport Item from './Item';\nimport { Grid, AutoSizer } from 'react-virtualized';\n\nvar Items = function Items(props) {\n  var onmousedown = function onmousedown(imgId) {\n    props.selectItem(imgId);\n  };\n\n  var index = -1;\n  var picturesPerRow = props.imagesPerRow;\n  var length = props.images.length;\n  var quotient = Math.floor(length / picturesPerRow);\n  var remainder = length % picturesPerRow;\n  var rowCount = quotient;\n\n  if (remainder !== 0) {\n    rowCount = rowCount + 1;\n  }\n\n  var cellRenderer = function cellRenderer(_ref) {\n    var columnIndex = _ref.columnIndex,\n        key = _ref.key,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n\n    // Cell renderer for virtualized list\n    var newStyle = _objectSpread({}, style);\n\n    if (typeof cellRenderer.counter == 'undefined') {\n      cellRenderer.counter = -1;\n    } else if (cellRenderer.counter === props.images.length - 1) {\n      cellRenderer.counter = 0;\n    }\n\n    if (rowIndex === rowCount - 1 && columnIndex > remainder - 1) {\n      if (remainder !== 0) {\n        return;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      key: key,\n      style: newStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Item, {\n      images: props.images,\n      index: cellRenderer.counter,\n      containerStyle: style,\n      key: key,\n      selectedItems: props.selectedItems,\n      onmousedown: onmousedown,\n      ondrag: props.ondrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(AutoSizer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, function (_ref2) {\n    var height = _ref2.height,\n        width = _ref2.width;\n    var columnWidth = picturesPerRow > length ? width / length : width / picturesPerRow;\n    return React.createElement(Grid, {\n      cellRenderer: cellRenderer,\n      columnCount: picturesPerRow > length ? length : picturesPerRow,\n      columnWidth: columnWidth,\n      height: height,\n      rowCount: rowCount,\n      rowHeight: 300,\n      width: width,\n      style: {\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Items;","map":{"version":3,"sources":["/Users/cfriedri/Documents/work/Cyto-Grid/src/Items.js"],"names":["React","Item","Grid","AutoSizer","Items","props","onmousedown","imgId","selectItem","index","picturesPerRow","imagesPerRow","length","images","quotient","Math","floor","remainder","rowCount","cellRenderer","columnIndex","key","rowIndex","style","newStyle","counter","selectedItems","ondrag","height","width","columnWidth","outline"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,IAAT,EAAgBC,SAAhB,QAAiC,mBAAjC;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrB,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC3BF,IAAAA,KAAK,CAACG,UAAN,CAAiBD,KAAjB;AACH,GAFD;;AAIA,MAAIE,KAAK,GAAG,CAAC,CAAb;AACA,MAAMC,cAAc,GAAGL,KAAK,CAACM,YAA7B;AACA,MAAMC,MAAM,GAAGP,KAAK,CAACQ,MAAN,CAAaD,MAA5B;AACA,MAAME,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAACF,cAAlB,CAAjB;AACA,MAAMO,SAAS,GAAGL,MAAM,GAAGF,cAA3B;AACA,MAAIQ,QAAQ,GAAGJ,QAAf;;AACA,MAAIG,SAAS,KAAK,CAAlB,EAAqB;AACjBC,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAtB;AACH;;AAED,MAAMC,YAAY,GAAG,SAAfA,YAAe,OAAiD;AAAA,QAArCC,WAAqC,QAArCA,WAAqC;AAAA,QAAxBC,GAAwB,QAAxBA,GAAwB;AAAA,QAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,QAATC,KAAS,QAATA,KAAS;;AAClE;AACA,QAAIC,QAAQ,qBAAMD,KAAN,CAAZ;;AACA,QAAI,OAAOJ,YAAY,CAACM,OAApB,IAA+B,WAAnC,EAAiD;AAC7CN,MAAAA,YAAY,CAACM,OAAb,GAAuB,CAAC,CAAxB;AACH,KAFD,MAGK,IAAGN,YAAY,CAACM,OAAb,KAAyBpB,KAAK,CAACQ,MAAN,CAAaD,MAAb,GAAoB,CAAhD,EAAkD;AACnDO,MAAAA,YAAY,CAACM,OAAb,GAAuB,CAAvB;AACH;;AACD,QAAGH,QAAQ,KAAKJ,QAAQ,GAAC,CAAtB,IAA2BE,WAAW,GAAGH,SAAS,GAAC,CAAtD,EAAwD;AACpD,UAAGA,SAAS,KAAK,CAAjB,EAAmB;AACf;AACH;AACJ;;AACD,WACI;AAAK,MAAA,GAAG,EAAEI,GAAV;AAAe,MAAA,KAAK,EAAEG,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACI,MAAA,MAAM,EAAEnB,KAAK,CAACQ,MADlB;AAEI,MAAA,KAAK,EAAEM,YAAY,CAACM,OAFxB;AAGI,MAAA,cAAc,EAAEF,KAHpB;AAII,MAAA,GAAG,EAAEF,GAJT;AAKI,MAAA,aAAa,EAAEhB,KAAK,CAACqB,aALzB;AAMI,MAAA,WAAW,EAAEpB,WANjB;AAOI,MAAA,MAAM,EAAED,KAAK,CAACsB,MAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAaH,GA3BD;;AA6BF,SACM,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,iBAAuB;AAAA,QAApBC,MAAoB,SAApBA,MAAoB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AACpB,QAAIC,WAAW,GAAGpB,cAAc,GAAGE,MAAjB,GAA0BiB,KAAK,GAACjB,MAAhC,GAAyCiB,KAAK,GAACnB,cAAjE;AACA,WAAQ,oBAAC,IAAD;AACJ,MAAA,YAAY,EAAES,YADV;AAEJ,MAAA,WAAW,EAAET,cAAc,GAAGE,MAAjB,GAA0BA,MAA1B,GAAmCF,cAF5C;AAGJ,MAAA,WAAW,EAAEoB,WAHT;AAIJ,MAAA,MAAM,EAAEF,MAJJ;AAKJ,MAAA,QAAQ,EAAEV,QALN;AAMJ,MAAA,SAAS,EAAE,GANP;AAOJ,MAAA,KAAK,EAAEW,KAPH;AAQJ,MAAA,KAAK,EAAE;AAACE,QAAAA,OAAO,EAAE;AAAV,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAUH,GAbL,CADN;AAiBD,CA7DD;;AA+DA,eAAe3B,KAAf","sourcesContent":["import React from 'react'\nimport Item from './Item'\nimport { Grid,  AutoSizer } from 'react-virtualized';\n\n\nconst Items = (props) => {\n    const onmousedown = (imgId) => {\n        props.selectItem(imgId)\n    }\n\n    let index = -1\n    const picturesPerRow = props.imagesPerRow\n    const length = props.images.length\n    const quotient = Math.floor(length/picturesPerRow);\n    const remainder = length % picturesPerRow;\n    let rowCount = quotient\n    if( remainder !== 0 ){\n        rowCount = rowCount + 1\n    }\n\n    const cellRenderer = function ({ columnIndex, key, rowIndex, style }) {\n        // Cell renderer for virtualized list\n        let newStyle ={...style}\n        if( typeof cellRenderer.counter == 'undefined' ) {\n            cellRenderer.counter = -1;\n        }\n        else if(cellRenderer.counter === props.images.length-1){\n            cellRenderer.counter = 0 \n        }\n        if(rowIndex === rowCount-1 && columnIndex > remainder-1){\n            if(remainder !== 0){\n                return\n            }\n        }\n        return (\n            <div key={key} style={newStyle}>  \n                <Item\n                    images={props.images}\n                    index={cellRenderer.counter}\n                    containerStyle={style}\n                    key={key} \n                    selectedItems={props.selectedItems} \n                    onmousedown={onmousedown} \n                    ondrag={props.ondrag}\n                />\n            </div>\n        )  \n    }\n       \n  return (\n        <AutoSizer>\n            {({ height, width }) => { \n                let columnWidth = picturesPerRow > length ? width/length : width/picturesPerRow\n                return (<Grid\n                    cellRenderer={cellRenderer}\n                    columnCount={picturesPerRow > length ? length : picturesPerRow}\n                    columnWidth={columnWidth}\n                    height={height} \n                    rowCount={rowCount}\n                    rowHeight={300}\n                    width={width}\n                    style={{outline: \"none\"}}\n                />)\n            }}\n        </AutoSizer>\n  )\n}\n\nexport default Items\n"]},"metadata":{},"sourceType":"module"}